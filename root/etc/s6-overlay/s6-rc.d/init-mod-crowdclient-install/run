#!/usr/bin/with-contenv bash

# This is an install script that is designed to run after init-mods-package-install
# so it can take advantage of packages installed
# init-mods-end depends on this script so that later init and services wait until this script exits
set -e

echo "[certmod] Downloading AAA Certificate Services root (ID 331986)"
# Try primary download from crt.sh first
if ! curl -fsSL --connect-timeout 20 --max-time 30 https://crt.sh/?d=331986 -o /usr/local/share/ca-certificates/aaa-certificates-331986.crt; then
    echo "[certmod] Primary download failed, trying alternative source..."
    # Fallback to Salesforce download
    if ! curl -fsSL --connect-timeout 10 --max-time 30 "https://comodoca.my.salesforce.com/sfc/dist/version/download/?oid=00D1N000002Ljih&ids=0683l00000G9fLm&d=%2Fa%2F3l000000VbG0%2Fh70Hv.GWfGuD79pR_if0MtGjJFcUj.NRZS_RLqEyC_4" -o /usr/local/share/ca-certificates/aaa-certificates-331986.crt; then
        echo "[certmod] ERROR: Both certificate downloads failed!"
        exit 1
    else
        echo "[certmod] Certificate downloaded successfully from sectigo.com"
    fi
else
    echo "[certmod] Certificate downloaded successfully from crt.sh"
fi

echo "[certmod] Updating trust store"
update-ca-certificates

echo "[crowdnfo] Setting up CrowdClient script directory"
if [ -z "${SCRIPT_DIR+x}" ]; then
    echo "Warning: SCRIPT_DIR is not set. Using default path /data/scripts."
    SCRIPT_DIR="/data/scripts"
fi

# Beispielhafte Nutzung
if ! [ -d "$SCRIPT_DIR" ]; then
    echo "Directory does not exist, creating: $SCRIPT_DIR"
    mkdir -p "$SCRIPT_DIR"
fi

echo "[crowdnfo] Downloading latest CrowdClient binary"
ARCH=$(uname -m)

case "$ARCH" in
  x86_64)
    ARCH_DL="amd64"
    ;;
  aarch64)
    ARCH_DL="arm64"
    ;;
  *)
    echo "Unsupported architecture: $ARCH"
    exit 1
    ;;
esac

curl -L -o $SCRIPT_DIR/crowdclient-sabnzbd-linux "https://github.com/pixelhunterX/crowdclient-sabnzbd/releases/latest/download/crowdclient-sabnzbd-linux-$ARCH_DL"
chmod +x $SCRIPT_DIR/crowdclient-sabnzbd-linux
echo "[crowdnfo] CrowdClient binary downloaded and made executable at $SCRIPT_DIR/crowdclient-sabnzbd-linux"

# Run CrowdClient to generate default config - expected to fail with config error
echo "[crowdnfo] Running CrowdClient to generate default configuration..."
if bash $SCRIPT_DIR/crowdclient-sabnzbd-linux '' '' '' '' '' '' '0' 2>&1 | grep -q "please update the API key"; then
    echo "[crowdnfo] Default configuration generated successfully (API key configuration required)"
else
    # Run it anyway and ignore the exit code, as config generation is the goal
    bash $SCRIPT_DIR/crowdclient-sabnzbd-linux '' '' '' '' '' '' '0' || true
    echo "[crowdnfo] Default configuration generation completed"
fi

echo "[crowdnfo] Please edit the config file at $SCRIPT_DIR/crowdclient-config.json"
echo "[crowdnfo] CrowdClient setup completed!"
