#!/usr/bin/with-contenv bash

# This is an install script that is designed to run after init-mods-package-install
# so it can take advantage of packages installed
# init-mods-end depends on this script so that later init and services wait until this script exits
set -e

echo "[certmod] Installing AAA Certificate Services root (ID 331986)"
# Check if the certificate is already embedded in the usr directory
if [ -f "/usr/local/share/ca-certificates/aaa-certificates-331986.crt" ]; then
    echo "[certmod] Using embedded certificate from Docker mod"
fi

echo "[certmod] Updating trust store"
update-ca-certificates

echo "[crowdnfo] Setting up CrowdClient script directory"
if [ -z "${SCRIPT_DIR+x}" ]; then
    echo "Warning: SCRIPT_DIR is not set. Using default path /data/scripts."
    SCRIPT_DIR="/data/scripts"
else
    # Remove quotes from SCRIPT_DIR if present (both single and double quotes)
    SCRIPT_DIR=$(echo "$SCRIPT_DIR" | sed "s/^[\"']//;s/[\"']$//")
fi

# Beispielhafte Nutzung
if ! [ -d "$SCRIPT_DIR" ]; then
    echo "Directory does not exist, creating: $SCRIPT_DIR"
    mkdir -p "$SCRIPT_DIR"
fi

echo "[crowdnfo] Downloading latest CrowdClient binary"
ARCH=$(uname -m)

case "$ARCH" in
  x86_64)
    ARCH_DL="amd64"
    ;;
  aarch64)
    ARCH_DL="arm64"
    ;;
  *)
    echo "Unsupported architecture: $ARCH"
    exit 1
    ;;
esac

curl -L -o $SCRIPT_DIR/crowdclient-sabnzbd-linux "https://github.com/pixelhunterX/crowdclient-sabnzbd/releases/latest/download/crowdclient-sabnzbd-linux-$ARCH_DL"
chmod +x $SCRIPT_DIR/crowdclient-sabnzbd-linux
echo "[crowdnfo] CrowdClient binary downloaded and made executable at $SCRIPT_DIR/crowdclient-sabnzbd-linux"

# Run CrowdClient to generate default config - expected to fail with config error
echo "[crowdnfo] Running CrowdClient to generate default configuration..."
if $SCRIPT_DIR/crowdclient-sabnzbd-linux '' '' '' '' '' '' '0' 2>&1 | grep -q "please update the API key"; then
    echo "[crowdnfo] Default configuration generated successfully (API key configuration required)"
else
    # Run it anyway and ignore the exit code, as config generation is the goal
    $SCRIPT_DIR/crowdclient-sabnzbd-linux '' '' '' '' '' '' '0' || true
    echo "[crowdnfo] Default configuration generation completed"
fi

echo "[crowdnfo] Please edit the config file at $SCRIPT_DIR/crowdclient-config.json"

# Set proper ownership for the binary
if [ -n "${PUID:-}" ] && [ -n "${PGID:-}" ]; then
    echo "[crowdnfo] Setting ownership to PUID:PGID ($PUID:$PGID)"
    chown $PUID:$PGID $SCRIPT_DIR/crowdclient-sabnzbd-linux
else
    # Try to find a non-root user as fallback
    if [ -n "${USER:-}" ] && [ "$USER" != "root" ] && id "$USER" >/dev/null 2>&1; then
        echo "[crowdnfo] PUID/PGID not set, using USER environment variable: $USER"
        chown $USER:$USER $SCRIPT_DIR/crowdclient-sabnzbd-linux
    else
        # Last resort: use 1000:1000 (common default user ID)
        echo "[crowdnfo] PUID/PGID not set, using default 1000:1000"
        chown 1000:1000 $SCRIPT_DIR/crowdclient-sabnzbd-linux 2>/dev/null || echo "[crowdnfo] Warning: Could not set ownership to 1000:1000, keeping root"
    fi
fi

# Set proper ownership for the config file
CONFIG_FILE="$SCRIPT_DIR/crowdclient-config.json"
if [ -f "$CONFIG_FILE" ]; then
    if [ -n "${PUID:-}" ] && [ -n "${PGID:-}" ]; then
        chown $PUID:$PGID "$CONFIG_FILE"
        echo "[crowdnfo] Set ownership of config file to PUID:PGID ($PUID:$PGID)"
    else
        # Use same fallback logic as for binary
        if [ -n "${USER:-}" ] && [ "$USER" != "root" ] && id "$USER" >/dev/null 2>&1; then
            chown $USER:$USER "$CONFIG_FILE"
            echo "[crowdnfo] Set ownership of config file to USER: $USER"
        else
            chown 1000:1000 "$CONFIG_FILE" 2>/dev/null || echo "[crowdnfo] Warning: Could not set config file ownership"
            echo "[crowdnfo] Set ownership of config file to default 1000:1000"
        fi
    fi
    # Ensure the config file is readable and writable
    chmod 644 "$CONFIG_FILE"
fi
echo "[crowdnfo] CrowdClient setup completed!"